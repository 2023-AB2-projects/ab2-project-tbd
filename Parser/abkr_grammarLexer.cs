//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class abkr_grammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, STRING=6, CREATE=7, DATABASE=8, 
		TABLE=9, INDEX=10, DROP=11, ON=12, INT=13, VARCHAR=14, PRIMARY=15, KEY=16, 
		INSERT=17, INTO=18, VALUES=19, DELETE=20, FROM=21, WHERE=22, NUMBER=23, 
		IDENTIFIER=24, WS=25;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "STRING", "CREATE", "DATABASE", 
		"TABLE", "INDEX", "DROP", "ON", "INT", "VARCHAR", "PRIMARY", "KEY", "INSERT", 
		"INTO", "VALUES", "DELETE", "FROM", "WHERE", "NUMBER", "IDENTIFIER", "WS"
	};


	public abkr_grammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public abkr_grammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'('", "')'", "','", "'='", null, "'CREATE'", "'DATABASE'", 
		"'TABLE'", "'INDEX'", "'DROP'", "'ON'", "'INT'", "'VARCHAR'", "'PRIMARY'", 
		"'KEY'", "'INSERT'", "'INTO'", "'VALUES'", "'DELETE'", "'FROM'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "STRING", "CREATE", "DATABASE", "TABLE", 
		"INDEX", "DROP", "ON", "INT", "VARCHAR", "PRIMARY", "KEY", "INSERT", "INTO", 
		"VALUES", "DELETE", "FROM", "WHERE", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static abkr_grammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,25,190,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,68,8,5,10,5,12,5,71,9,5,1,5,1,5,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
		1,21,1,21,1,21,1,21,1,21,1,21,1,22,4,22,173,8,22,11,22,12,22,174,1,23,
		1,23,5,23,179,8,23,10,23,12,23,182,9,23,1,24,4,24,185,8,24,11,24,12,24,
		186,1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,1,0,5,1,0,39,39,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,
		90,95,95,97,122,3,0,9,10,13,13,32,32,195,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,57,1,0,0,0,9,59,1,0,0,
		0,11,61,1,0,0,0,13,74,1,0,0,0,15,81,1,0,0,0,17,90,1,0,0,0,19,96,1,0,0,
		0,21,102,1,0,0,0,23,107,1,0,0,0,25,110,1,0,0,0,27,114,1,0,0,0,29,122,1,
		0,0,0,31,130,1,0,0,0,33,134,1,0,0,0,35,141,1,0,0,0,37,146,1,0,0,0,39,153,
		1,0,0,0,41,160,1,0,0,0,43,165,1,0,0,0,45,172,1,0,0,0,47,176,1,0,0,0,49,
		184,1,0,0,0,51,52,5,46,0,0,52,2,1,0,0,0,53,54,5,40,0,0,54,4,1,0,0,0,55,
		56,5,41,0,0,56,6,1,0,0,0,57,58,5,44,0,0,58,8,1,0,0,0,59,60,5,61,0,0,60,
		10,1,0,0,0,61,69,5,39,0,0,62,68,8,0,0,0,63,64,5,39,0,0,64,68,5,39,0,0,
		65,66,5,92,0,0,66,68,5,39,0,0,67,62,1,0,0,0,67,63,1,0,0,0,67,65,1,0,0,
		0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,
		0,72,73,5,39,0,0,73,12,1,0,0,0,74,75,5,67,0,0,75,76,5,82,0,0,76,77,5,69,
		0,0,77,78,5,65,0,0,78,79,5,84,0,0,79,80,5,69,0,0,80,14,1,0,0,0,81,82,5,
		68,0,0,82,83,5,65,0,0,83,84,5,84,0,0,84,85,5,65,0,0,85,86,5,66,0,0,86,
		87,5,65,0,0,87,88,5,83,0,0,88,89,5,69,0,0,89,16,1,0,0,0,90,91,5,84,0,0,
		91,92,5,65,0,0,92,93,5,66,0,0,93,94,5,76,0,0,94,95,5,69,0,0,95,18,1,0,
		0,0,96,97,5,73,0,0,97,98,5,78,0,0,98,99,5,68,0,0,99,100,5,69,0,0,100,101,
		5,88,0,0,101,20,1,0,0,0,102,103,5,68,0,0,103,104,5,82,0,0,104,105,5,79,
		0,0,105,106,5,80,0,0,106,22,1,0,0,0,107,108,5,79,0,0,108,109,5,78,0,0,
		109,24,1,0,0,0,110,111,5,73,0,0,111,112,5,78,0,0,112,113,5,84,0,0,113,
		26,1,0,0,0,114,115,5,86,0,0,115,116,5,65,0,0,116,117,5,82,0,0,117,118,
		5,67,0,0,118,119,5,72,0,0,119,120,5,65,0,0,120,121,5,82,0,0,121,28,1,0,
		0,0,122,123,5,80,0,0,123,124,5,82,0,0,124,125,5,73,0,0,125,126,5,77,0,
		0,126,127,5,65,0,0,127,128,5,82,0,0,128,129,5,89,0,0,129,30,1,0,0,0,130,
		131,5,75,0,0,131,132,5,69,0,0,132,133,5,89,0,0,133,32,1,0,0,0,134,135,
		5,73,0,0,135,136,5,78,0,0,136,137,5,83,0,0,137,138,5,69,0,0,138,139,5,
		82,0,0,139,140,5,84,0,0,140,34,1,0,0,0,141,142,5,73,0,0,142,143,5,78,0,
		0,143,144,5,84,0,0,144,145,5,79,0,0,145,36,1,0,0,0,146,147,5,86,0,0,147,
		148,5,65,0,0,148,149,5,76,0,0,149,150,5,85,0,0,150,151,5,69,0,0,151,152,
		5,83,0,0,152,38,1,0,0,0,153,154,5,68,0,0,154,155,5,69,0,0,155,156,5,76,
		0,0,156,157,5,69,0,0,157,158,5,84,0,0,158,159,5,69,0,0,159,40,1,0,0,0,
		160,161,5,70,0,0,161,162,5,82,0,0,162,163,5,79,0,0,163,164,5,77,0,0,164,
		42,1,0,0,0,165,166,5,87,0,0,166,167,5,72,0,0,167,168,5,69,0,0,168,169,
		5,82,0,0,169,170,5,69,0,0,170,44,1,0,0,0,171,173,7,1,0,0,172,171,1,0,0,
		0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,46,1,0,0,0,176,180,
		7,2,0,0,177,179,7,3,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,
		0,180,181,1,0,0,0,181,48,1,0,0,0,182,180,1,0,0,0,183,185,7,4,0,0,184,183,
		1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,
		0,188,189,6,24,0,0,189,50,1,0,0,0,6,0,67,69,174,180,186,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

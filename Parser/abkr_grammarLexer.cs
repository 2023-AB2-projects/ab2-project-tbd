//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class abkr_grammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, STRING=6, CREATE=7, DATABASE=8, 
		TABLE=9, INDEX=10, UNIQUE=11, DROP=12, ON=13, INT=14, VARCHAR=15, PRIMARY=16, 
		KEY=17, FOREIGN=18, REFERENCES=19, INSERT=20, INTO=21, VALUES=22, DELETE=23, 
		FROM=24, WHERE=25, NUMBER=26, IDENTIFIER=27, WS=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "STRING", "CREATE", "DATABASE", 
		"TABLE", "INDEX", "UNIQUE", "DROP", "ON", "INT", "VARCHAR", "PRIMARY", 
		"KEY", "FOREIGN", "REFERENCES", "INSERT", "INTO", "VALUES", "DELETE", 
		"FROM", "WHERE", "NUMBER", "IDENTIFIER", "WS"
	};


	public abkr_grammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public abkr_grammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'('", "')'", "','", "'='", null, "'CREATE'", "'DATABASE'", 
		"'TABLE'", "'INDEX'", "'UNIQUE'", "'DROP'", "'ON'", "'INT'", "'VARCHAR'", 
		"'PRIMARY'", "'KEY'", "'FOREIGN'", "'REFERENCES'", "'INSERT'", "'INTO'", 
		"'VALUES'", "'DELETE'", "'FROM'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "STRING", "CREATE", "DATABASE", "TABLE", 
		"INDEX", "UNIQUE", "DROP", "ON", "INT", "VARCHAR", "PRIMARY", "KEY", "FOREIGN", 
		"REFERENCES", "INSERT", "INTO", "VALUES", "DELETE", "FROM", "WHERE", "NUMBER", 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static abkr_grammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,222,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,74,8,5,10,
		5,12,5,77,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
		23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,4,25,205,8,25,11,
		25,12,25,206,1,26,1,26,5,26,211,8,26,10,26,12,26,214,9,26,1,27,4,27,217,
		8,27,11,27,12,27,218,1,27,1,27,0,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,1,0,5,1,0,39,39,1,0,
		48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
		32,227,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,
		0,11,67,1,0,0,0,13,80,1,0,0,0,15,87,1,0,0,0,17,96,1,0,0,0,19,102,1,0,0,
		0,21,108,1,0,0,0,23,115,1,0,0,0,25,120,1,0,0,0,27,123,1,0,0,0,29,127,1,
		0,0,0,31,135,1,0,0,0,33,143,1,0,0,0,35,147,1,0,0,0,37,155,1,0,0,0,39,166,
		1,0,0,0,41,173,1,0,0,0,43,178,1,0,0,0,45,185,1,0,0,0,47,192,1,0,0,0,49,
		197,1,0,0,0,51,204,1,0,0,0,53,208,1,0,0,0,55,216,1,0,0,0,57,58,5,46,0,
		0,58,2,1,0,0,0,59,60,5,40,0,0,60,4,1,0,0,0,61,62,5,41,0,0,62,6,1,0,0,0,
		63,64,5,44,0,0,64,8,1,0,0,0,65,66,5,61,0,0,66,10,1,0,0,0,67,75,5,39,0,
		0,68,74,8,0,0,0,69,70,5,39,0,0,70,74,5,39,0,0,71,72,5,92,0,0,72,74,5,39,
		0,0,73,68,1,0,0,0,73,69,1,0,0,0,73,71,1,0,0,0,74,77,1,0,0,0,75,73,1,0,
		0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,39,0,0,79,12,1,0,
		0,0,80,81,5,67,0,0,81,82,5,82,0,0,82,83,5,69,0,0,83,84,5,65,0,0,84,85,
		5,84,0,0,85,86,5,69,0,0,86,14,1,0,0,0,87,88,5,68,0,0,88,89,5,65,0,0,89,
		90,5,84,0,0,90,91,5,65,0,0,91,92,5,66,0,0,92,93,5,65,0,0,93,94,5,83,0,
		0,94,95,5,69,0,0,95,16,1,0,0,0,96,97,5,84,0,0,97,98,5,65,0,0,98,99,5,66,
		0,0,99,100,5,76,0,0,100,101,5,69,0,0,101,18,1,0,0,0,102,103,5,73,0,0,103,
		104,5,78,0,0,104,105,5,68,0,0,105,106,5,69,0,0,106,107,5,88,0,0,107,20,
		1,0,0,0,108,109,5,85,0,0,109,110,5,78,0,0,110,111,5,73,0,0,111,112,5,81,
		0,0,112,113,5,85,0,0,113,114,5,69,0,0,114,22,1,0,0,0,115,116,5,68,0,0,
		116,117,5,82,0,0,117,118,5,79,0,0,118,119,5,80,0,0,119,24,1,0,0,0,120,
		121,5,79,0,0,121,122,5,78,0,0,122,26,1,0,0,0,123,124,5,73,0,0,124,125,
		5,78,0,0,125,126,5,84,0,0,126,28,1,0,0,0,127,128,5,86,0,0,128,129,5,65,
		0,0,129,130,5,82,0,0,130,131,5,67,0,0,131,132,5,72,0,0,132,133,5,65,0,
		0,133,134,5,82,0,0,134,30,1,0,0,0,135,136,5,80,0,0,136,137,5,82,0,0,137,
		138,5,73,0,0,138,139,5,77,0,0,139,140,5,65,0,0,140,141,5,82,0,0,141,142,
		5,89,0,0,142,32,1,0,0,0,143,144,5,75,0,0,144,145,5,69,0,0,145,146,5,89,
		0,0,146,34,1,0,0,0,147,148,5,70,0,0,148,149,5,79,0,0,149,150,5,82,0,0,
		150,151,5,69,0,0,151,152,5,73,0,0,152,153,5,71,0,0,153,154,5,78,0,0,154,
		36,1,0,0,0,155,156,5,82,0,0,156,157,5,69,0,0,157,158,5,70,0,0,158,159,
		5,69,0,0,159,160,5,82,0,0,160,161,5,69,0,0,161,162,5,78,0,0,162,163,5,
		67,0,0,163,164,5,69,0,0,164,165,5,83,0,0,165,38,1,0,0,0,166,167,5,73,0,
		0,167,168,5,78,0,0,168,169,5,83,0,0,169,170,5,69,0,0,170,171,5,82,0,0,
		171,172,5,84,0,0,172,40,1,0,0,0,173,174,5,73,0,0,174,175,5,78,0,0,175,
		176,5,84,0,0,176,177,5,79,0,0,177,42,1,0,0,0,178,179,5,86,0,0,179,180,
		5,65,0,0,180,181,5,76,0,0,181,182,5,85,0,0,182,183,5,69,0,0,183,184,5,
		83,0,0,184,44,1,0,0,0,185,186,5,68,0,0,186,187,5,69,0,0,187,188,5,76,0,
		0,188,189,5,69,0,0,189,190,5,84,0,0,190,191,5,69,0,0,191,46,1,0,0,0,192,
		193,5,70,0,0,193,194,5,82,0,0,194,195,5,79,0,0,195,196,5,77,0,0,196,48,
		1,0,0,0,197,198,5,87,0,0,198,199,5,72,0,0,199,200,5,69,0,0,200,201,5,82,
		0,0,201,202,5,69,0,0,202,50,1,0,0,0,203,205,7,1,0,0,204,203,1,0,0,0,205,
		206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,52,1,0,0,0,208,212,7,2,
		0,0,209,211,7,3,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,
		213,1,0,0,0,213,54,1,0,0,0,214,212,1,0,0,0,215,217,7,4,0,0,216,215,1,0,
		0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,
		221,6,27,0,0,221,56,1,0,0,0,6,0,73,75,206,212,218,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

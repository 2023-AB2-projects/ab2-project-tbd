//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class abkr_grammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, CREATE=4, DATABASE=5, TABLE=6, INDEX=7, DROP=8, 
		ON=9, INT=10, VARCHAR=11, NUMBER=12, IDENTIFIER=13, WS=14;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "CREATE", "DATABASE", "TABLE", "INDEX", "DROP", 
		"ON", "INT", "VARCHAR", "NUMBER", "IDENTIFIER", "WS"
	};


	public abkr_grammarLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'CREATE'", "'DATABASE'", "'TABLE'", "'INDEX'", 
		"'DROP'", "'ON'", "'INT'", "'VARCHAR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "CREATE", "DATABASE", "TABLE", "INDEX", "DROP", 
		"ON", "INT", "VARCHAR", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static abkr_grammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x10");
		sb.Append("h\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3");
		sb.Append("\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\r\x6\rW\n\r\r\r\xE\rX\x3\xE\x3\xE\a");
		sb.Append("\xE]\n\xE\f\xE\xE\xE`\v\xE\x3\xF\x6\xF\x63\n\xF\r\xF\xE\xF\x64");
		sb.Append("\x3\xF\x3\xF\x2\x2\x10\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11");
		sb.Append("\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x3\x2\x6\x3\x2\x32");
		sb.Append(";\x4\x2\x43\\\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF");
		sb.Append("\xF\"\"j\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2");
		sb.Append("\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3");
		sb.Append("\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2");
		sb.Append("\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2");
		sb.Append("\x2\x2\x1D\x3\x2\x2\x2\x3\x1F\x3\x2\x2\x2\x5!\x3\x2\x2\x2\a");
		sb.Append("#\x3\x2\x2\x2\t%\x3\x2\x2\x2\v,\x3\x2\x2\x2\r\x35\x3\x2\x2\x2");
		sb.Append("\xF;\x3\x2\x2\x2\x11\x41\x3\x2\x2\x2\x13\x46\x3\x2\x2\x2\x15");
		sb.Append("I\x3\x2\x2\x2\x17M\x3\x2\x2\x2\x19V\x3\x2\x2\x2\x1BZ\x3\x2\x2");
		sb.Append("\x2\x1D\x62\x3\x2\x2\x2\x1F \a*\x2\x2 \x4\x3\x2\x2\x2!\"\a+");
		sb.Append("\x2\x2\"\x6\x3\x2\x2\x2#$\a.\x2\x2$\b\x3\x2\x2\x2%&\a\x45\x2");
		sb.Append("\x2&\'\aT\x2\x2\'(\aG\x2\x2()\a\x43\x2\x2)*\aV\x2\x2*+\aG\x2");
		sb.Append("\x2+\n\x3\x2\x2\x2,-\a\x46\x2\x2-.\a\x43\x2\x2./\aV\x2\x2/\x30");
		sb.Append("\a\x43\x2\x2\x30\x31\a\x44\x2\x2\x31\x32\a\x43\x2\x2\x32\x33");
		sb.Append("\aU\x2\x2\x33\x34\aG\x2\x2\x34\f\x3\x2\x2\x2\x35\x36\aV\x2\x2");
		sb.Append("\x36\x37\a\x43\x2\x2\x37\x38\a\x44\x2\x2\x38\x39\aN\x2\x2\x39");
		sb.Append(":\aG\x2\x2:\xE\x3\x2\x2\x2;<\aK\x2\x2<=\aP\x2\x2=>\a\x46\x2");
		sb.Append("\x2>?\aG\x2\x2?@\aZ\x2\x2@\x10\x3\x2\x2\x2\x41\x42\a\x46\x2");
		sb.Append("\x2\x42\x43\aT\x2\x2\x43\x44\aQ\x2\x2\x44\x45\aR\x2\x2\x45\x12");
		sb.Append("\x3\x2\x2\x2\x46G\aQ\x2\x2GH\aP\x2\x2H\x14\x3\x2\x2\x2IJ\aK");
		sb.Append("\x2\x2JK\aP\x2\x2KL\aV\x2\x2L\x16\x3\x2\x2\x2MN\aX\x2\x2NO\a");
		sb.Append("\x43\x2\x2OP\aT\x2\x2PQ\a\x45\x2\x2QR\aJ\x2\x2RS\a\x43\x2\x2");
		sb.Append("ST\aT\x2\x2T\x18\x3\x2\x2\x2UW\t\x2\x2\x2VU\x3\x2\x2\x2WX\x3");
		sb.Append("\x2\x2\x2XV\x3\x2\x2\x2XY\x3\x2\x2\x2Y\x1A\x3\x2\x2\x2Z^\t\x3");
		sb.Append("\x2\x2[]\t\x4\x2\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2");
		sb.Append("\x2^_\x3\x2\x2\x2_\x1C\x3\x2\x2\x2`^\x3\x2\x2\x2\x61\x63\t\x5");
		sb.Append("\x2\x2\x62\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x62\x3\x2");
		sb.Append("\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\b\xF\x2");
		sb.Append("\x2g\x1E\x3\x2\x2\x2\x6\x2X^\x64\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}

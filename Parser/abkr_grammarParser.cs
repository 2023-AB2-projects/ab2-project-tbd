//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class abkr_grammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, CREATE=4, DATABASE=5, TABLE=6, INDEX=7, DROP=8, 
		ON=9, INT=10, VARCHAR=11, NUMBER=12, IDENTIFIER=13, WS=14;
	public const int
		RULE_statement = 0, RULE_create_database_statement = 1, RULE_create_table_statement = 2, 
		RULE_drop_database_statement = 3, RULE_drop_table_statement = 4, RULE_create_index_statement = 5, 
		RULE_drop_index_statement = 6, RULE_column_definition_list = 7, RULE_column_definition = 8, 
		RULE_identifier_list = 9, RULE_data_type = 10, RULE_identifier = 11;
	public static readonly string[] ruleNames = {
		"statement", "create_database_statement", "create_table_statement", "drop_database_statement", 
		"drop_table_statement", "create_index_statement", "drop_index_statement", 
		"column_definition_list", "column_definition", "identifier_list", "data_type", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'CREATE'", "'DATABASE'", "'TABLE'", "'INDEX'", 
		"'DROP'", "'ON'", "'INT'", "'VARCHAR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "CREATE", "DATABASE", "TABLE", "INDEX", "DROP", 
		"ON", "INT", "VARCHAR", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

    public override string[] TokenNames => throw new NotImplementedException();

    static abkr_grammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public abkr_grammarParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN);
	}
	public partial class StatementContext : ParserRuleContext {
		public Create_database_statementContext create_database_statement() {
			return GetRuleContext<Create_database_statementContext>(0);
		}
		public Create_table_statementContext create_table_statement() {
			return GetRuleContext<Create_table_statementContext>(0);
		}
		public Drop_database_statementContext drop_database_statement() {
			return GetRuleContext<Drop_database_statementContext>(0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return GetRuleContext<Drop_table_statementContext>(0);
		}
		public Create_index_statementContext create_index_statement() {
			return GetRuleContext<Create_index_statementContext>(0);
		}
		public Drop_index_statementContext drop_index_statement() {
			return GetRuleContext<Drop_index_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; create_database_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; create_table_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26; drop_database_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 27; drop_table_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 28; create_index_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 29; drop_index_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_statementContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
		public ITerminalNode DATABASE() { return GetToken(abkr_grammarParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_database_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_database_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_database_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_statementContext create_database_statement() {
		Create_database_statementContext _localctx = new Create_database_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_create_database_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(CREATE);
			State = 33; Match(DATABASE);
			State = 34; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_statementContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(abkr_grammarParser.TABLE, 0); }
		public IdentifierContext identifier(int v) {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Column_definition_listContext column_definition_list() {
			return GetRuleContext<Column_definition_listContext>(0);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_table_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_table_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_statementContext create_table_statement() {
		Create_table_statementContext _localctx = new Create_table_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_create_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(CREATE);
			State = 37; Match(TABLE);
			State = 38; identifier();
			State = 39; Match(T__0);
			State = 40; column_definition_list();
			State = 41; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_statementContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(abkr_grammarParser.DROP, 0); }
		public ITerminalNode DATABASE() { return GetToken(abkr_grammarParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Drop_database_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_database_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_database_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_statementContext drop_database_statement() {
		Drop_database_statementContext _localctx = new Drop_database_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_drop_database_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(DROP);
			State = 44; Match(DATABASE);
			State = 45; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_statementContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(abkr_grammarParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(abkr_grammarParser.TABLE, 0); }
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_table_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_table_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_statementContext drop_table_statement() {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_drop_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(DROP);
			State = 48; Match(TABLE);
			State = 49; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_statementContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(abkr_grammarParser.INDEX, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ON() { return GetToken(abkr_grammarParser.ON, 0); }
		public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		public Create_index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_index_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_index_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_statementContext create_index_statement() {
		Create_index_statementContext _localctx = new Create_index_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_create_index_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(CREATE);
			State = 52; Match(INDEX);
			State = 53; identifier();
			State = 54; Match(ON);
			State = 55; identifier();
			State = 56; Match(T__0);
			State = 57; identifier_list();
			State = 58; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_statementContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(abkr_grammarParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(abkr_grammarParser.INDEX, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ON() { return GetToken(abkr_grammarParser.ON, 0); }
		public Drop_index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_index_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_index_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_statementContext drop_index_statement() {
		Drop_index_statementContext _localctx = new Drop_index_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_drop_index_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(DROP);
			State = 61; Match(INDEX);
			State = 62; identifier();
			State = 63; Match(ON);
			State = 64; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definition_listContext : ParserRuleContext {
		public Column_definitionContext[] column_definition() {
			return GetRuleContexts<Column_definitionContext>();
		}
		public Column_definitionContext column_definition(int i) {
			return GetRuleContext<Column_definitionContext>(i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_definition_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_definition_listContext column_definition_list() {
		Column_definition_listContext _localctx = new Column_definition_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_column_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; column_definition();
			State = 71;
			ErrorHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 67; Match(T__2);
				State = 68; column_definition();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_column_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; identifier();
			State = 75; data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		Identifier_listContext _localctx = new Identifier_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; identifier();
			State = 82;
			ErrorHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 78; Match(T__2);
				State = 79; identifier();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(abkr_grammarParser.INT, 0); }
		public ITerminalNode VARCHAR() { return GetToken(abkr_grammarParser.VARCHAR, 0); }
		public ITerminalNode NUMBER() { return GetToken(abkr_grammarParser.NUMBER, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_data_type);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; Match(INT);
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; Match(VARCHAR);
				State = 87; Match(T__0);
				State = 88; Match(NUMBER);
				State = 89; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(abkr_grammarParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x10");
		sb.Append("\x61\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2!\n\x2\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b");
		sb.Append("\x3\t\x3\t\x3\t\a\tH\n\t\f\t\xE\tK\v\t\x3\n\x3\n\x3\n\x3\v\x3");
		sb.Append("\v\x3\v\a\vS\n\v\f\v\xE\vV\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f");
		sb.Append("]\n\f\x3\r\x3\r\x3\r\x2\x2\xE\x2\x4\x6\b\n\f\xE\x10\x12\x14");
		sb.Append("\x16\x18\x2\x2\\\x2 \x3\x2\x2\x2\x4\"\x3\x2\x2\x2\x6&\x3\x2");
		sb.Append("\x2\x2\b-\x3\x2\x2\x2\n\x31\x3\x2\x2\x2\f\x35\x3\x2\x2\x2\xE");
		sb.Append(">\x3\x2\x2\x2\x10\x44\x3\x2\x2\x2\x12L\x3\x2\x2\x2\x14O\x3\x2");
		sb.Append("\x2\x2\x16\\\x3\x2\x2\x2\x18^\x3\x2\x2\x2\x1A!\x5\x4\x3\x2\x1B");
		sb.Append("!\x5\x6\x4\x2\x1C!\x5\b\x5\x2\x1D!\x5\n\x6\x2\x1E!\x5\f\a\x2");
		sb.Append("\x1F!\x5\xE\b\x2 \x1A\x3\x2\x2\x2 \x1B\x3\x2\x2\x2 \x1C\x3\x2");
		sb.Append("\x2\x2 \x1D\x3\x2\x2\x2 \x1E\x3\x2\x2\x2 \x1F\x3\x2\x2\x2!\x3");
		sb.Append("\x3\x2\x2\x2\"#\a\x6\x2\x2#$\a\a\x2\x2$%\x5\x18\r\x2%\x5\x3");
		sb.Append("\x2\x2\x2&\'\a\x6\x2\x2\'(\a\b\x2\x2()\x5\x18\r\x2)*\a\x3\x2");
		sb.Append("\x2*+\x5\x10\t\x2+,\a\x4\x2\x2,\a\x3\x2\x2\x2-.\a\n\x2\x2./");
		sb.Append("\a\a\x2\x2/\x30\x5\x18\r\x2\x30\t\x3\x2\x2\x2\x31\x32\a\n\x2");
		sb.Append("\x2\x32\x33\a\b\x2\x2\x33\x34\x5\x18\r\x2\x34\v\x3\x2\x2\x2");
		sb.Append("\x35\x36\a\x6\x2\x2\x36\x37\a\t\x2\x2\x37\x38\x5\x18\r\x2\x38");
		sb.Append("\x39\a\v\x2\x2\x39:\x5\x18\r\x2:;\a\x3\x2\x2;<\x5\x14\v\x2<");
		sb.Append("=\a\x4\x2\x2=\r\x3\x2\x2\x2>?\a\n\x2\x2?@\a\t\x2\x2@\x41\x5");
		sb.Append("\x18\r\x2\x41\x42\a\v\x2\x2\x42\x43\x5\x18\r\x2\x43\xF\x3\x2");
		sb.Append("\x2\x2\x44I\x5\x12\n\x2\x45\x46\a\x5\x2\x2\x46H\x5\x12\n\x2");
		sb.Append("G\x45\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2");
		sb.Append("J\x11\x3\x2\x2\x2KI\x3\x2\x2\x2LM\x5\x18\r\x2MN\x5\x16\f\x2");
		sb.Append("N\x13\x3\x2\x2\x2OT\x5\x18\r\x2PQ\a\x5\x2\x2QS\x5\x18\r\x2R");
		sb.Append("P\x3\x2\x2\x2SV\x3\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2U\x15");
		sb.Append("\x3\x2\x2\x2VT\x3\x2\x2\x2W]\a\f\x2\x2XY\a\r\x2\x2YZ\a\x3\x2");
		sb.Append("\x2Z[\a\xE\x2\x2[]\a\x4\x2\x2\\W\x3\x2\x2\x2\\X\x3\x2\x2\x2");
		sb.Append("]\x17\x3\x2\x2\x2^_\a\xF\x2\x2_\x19\x3\x2\x2\x2\x6 IT\\");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}

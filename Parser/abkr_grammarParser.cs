//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;


namespace abkr.grammarParser
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
	[System.CLSCompliant(false)]
	public partial class abkr_grammarParser : Parser
	{
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			T__0 = 1, T__1 = 2, T__2 = 3, CREATE = 4, DATABASE = 5, TABLE = 6, INT = 7, VARCHAR = 8,
			NUMBER = 9, IDENTIFIER = 10, WS = 11;
		public const int
			RULE_statement = 0, RULE_create_database_statement = 1, RULE_create_table_statement = 2,
			RULE_column_definition_list = 3, RULE_column_definition = 4, RULE_data_type = 5,
			RULE_identifier = 6;
		public static readonly string[] ruleNames = {
		"statement", "create_database_statement", "create_table_statement", "column_definition_list",
		"column_definition", "data_type", "identifier"
	};

		private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'CREATE'", "'DATABASE'", "'TABLE'", "'INT'",
		"'VARCHAR'"
	};
		private static readonly string[] _SymbolicNames = {
		null, null, null, null, "CREATE", "DATABASE", "TABLE", "INT", "VARCHAR",
		"NUMBER", "IDENTIFIER", "WS"
	};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return _serializedATN; } }

		public override string[] TokenNames => throw new NotImplementedException();

		static abkr_grammarParser()
		{
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++)
			{
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public abkr_grammarParser(ITokenStream input)
			: base(input)
		{
			Interpreter = new ParserATNSimulator(this, _ATN);
		}
		public partial class StatementContext : ParserRuleContext
		{
			public Create_database_statementContext create_database_statement()
			{
				return GetRuleContext<Create_database_statementContext>(0);
			}
			public Create_table_statementContext create_table_statement()
			{
				return GetRuleContext<Create_table_statementContext>(0);
			}
			public StatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_statement; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterStatement(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitStatement(this);
			}
		}

		[RuleVersion(0)]
		public StatementContext statement()
		{
			StatementContext _localctx = new StatementContext(Context, State);
			EnterRule(_localctx, 0, RULE_statement);
			try
			{
				State = 16;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(_input, 0, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 14; create_database_statement();
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 15; create_table_statement();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}


		public partial class Create_database_statementContext : ParserRuleContext
		{
			public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
			public ITerminalNode DATABASE() { return GetToken(abkr_grammarParser.DATABASE, 0); }
			public IdentifierContext identifier()
			{
				return GetRuleContext<IdentifierContext>(0);
			}
			public Create_database_statementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_create_database_statement; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterCreate_database_statement(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitCreate_database_statement(this);
			}
		}

		[RuleVersion(0)]
		public Create_database_statementContext create_database_statement()
		{
			Create_database_statementContext _localctx = new Create_database_statementContext(Context, State);
			EnterRule(_localctx, 2, RULE_create_database_statement);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 18; Match(CREATE);
					State = 19; Match(DATABASE);
					State = 20; identifier();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Create_table_statementContext : ParserRuleContext
		{
			public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
			public ITerminalNode TABLE() { return GetToken(abkr_grammarParser.TABLE, 0); }
			public IdentifierContext identifier()
			{
				return GetRuleContext<IdentifierContext>(0);
			}
			public Column_definition_listContext column_definition_list()
			{
				return GetRuleContext<Column_definition_listContext>(0);
			}
			public Create_table_statementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_create_table_statement; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterCreate_table_statement(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitCreate_table_statement(this);
			}
		}

		[RuleVersion(0)]
		public Create_table_statementContext create_table_statement()
		{
			Create_table_statementContext _localctx = new Create_table_statementContext(Context, State);
			EnterRule(_localctx, 4, RULE_create_table_statement);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 22; Match(CREATE);
					State = 23; Match(TABLE);
					State = 24; identifier();
					State = 25; Match(T__0);
					State = 26; column_definition_list();
					State = 27; Match(T__1);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Column_definition_listContext : ParserRuleContext
		{
			public Column_definitionContext[] column_definition()
			{
				return GetRuleContexts<Column_definitionContext>();
			}
			public Column_definitionContext column_definition(int i)
			{
				return GetRuleContext<Column_definitionContext>(i);
			}
			public Column_definition_listContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_column_definition_list; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterColumn_definition_list(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitColumn_definition_list(this);
			}
		}

		[RuleVersion(0)]
		public Column_definition_listContext column_definition_list()
		{
			Column_definition_listContext _localctx = new Column_definition_listContext(Context, State);
			EnterRule(_localctx, 6, RULE_column_definition_list);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 29; column_definition();
					State = 34;
					ErrorHandler.Sync(this);
					_la = _input.La(1);
					while (_la == T__2)
					{
						{
							{
								State = 30; Match(T__2);
								State = 31; column_definition();
							}
						}
						State = 36;
						ErrorHandler.Sync(this);
						_la = _input.La(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}


		public partial class Column_definitionContext : ParserRuleContext
		{
			public IdentifierContext identifier()
			{
				return GetRuleContext<IdentifierContext>(0);
			}
			public Data_typeContext data_type()
			{
				return GetRuleContext<Data_typeContext>(0);
			}
			public Column_definitionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_column_definition; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterColumn_definition(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitColumn_definition(this);
			}
		}

		[RuleVersion(0)]
		public Column_definitionContext column_definition()
		{
			Column_definitionContext _localctx = new Column_definitionContext(Context, State);
			EnterRule(_localctx, 8, RULE_column_definition);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 37; identifier();
					State = 38; data_type();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class Data_typeContext : ParserRuleContext
		{
			public ITerminalNode INT() { return GetToken(abkr_grammarParser.INT, 0); }
			public ITerminalNode VARCHAR() { return GetToken(abkr_grammarParser.VARCHAR, 0); }
			public ITerminalNode NUMBER() { return GetToken(abkr_grammarParser.NUMBER, 0); }
			public Data_typeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_data_type; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterData_type(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitData_type(this);
			}
		}

		[RuleVersion(0)]
		public Data_typeContext data_type()
		{
			Data_typeContext _localctx = new Data_typeContext(Context, State);
			EnterRule(_localctx, 10, RULE_data_type);
			try
			{
				State = 45;
				ErrorHandler.Sync(this);
				switch (_input.La(1))
				{
					case INT:
						EnterOuterAlt(_localctx, 1);
						{
							State = 40; Match(INT);
						}
						break;
					case VARCHAR:
						EnterOuterAlt(_localctx, 2);
						{
							State = 41; Match(VARCHAR);
							State = 42; Match(T__0);
							State = 43; Match(NUMBER);
							State = 44; Match(T__1);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class IdentifierContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(abkr_grammarParser.IDENTIFIER, 0); }
			public IdentifierContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_identifier; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.EnterIdentifier(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
				if (typedListener != null) typedListener.ExitIdentifier(this);
			}
		}

		[RuleVersion(0)]
		public IdentifierContext identifier()
		{
			IdentifierContext _localctx = new IdentifierContext(Context, State);
			EnterRule(_localctx, 12, RULE_identifier);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 47; Match(IDENTIFIER);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		private static string _serializedATN = _serializeATN();
		private static string _serializeATN()
		{
			StringBuilder sb = new StringBuilder();
			sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\r\x34");
			sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
			sb.Append("\t\a\x4\b\t\b\x3\x2\x3\x2\x5\x2\x13\n\x2\x3\x3\x3\x3\x3\x3\x3");
			sb.Append("\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3");
			sb.Append("\x5\a\x5#\n\x5\f\x5\xE\x5&\v\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a");
			sb.Append("\x3\a\x3\a\x3\a\x5\a\x30\n\a\x3\b\x3\b\x3\b\x2\x2\t\x2\x4\x6");
			sb.Append("\b\n\f\xE\x2\x2/\x2\x12\x3\x2\x2\x2\x4\x14\x3\x2\x2\x2\x6\x18");
			sb.Append("\x3\x2\x2\x2\b\x1F\x3\x2\x2\x2\n\'\x3\x2\x2\x2\f/\x3\x2\x2\x2");
			sb.Append("\xE\x31\x3\x2\x2\x2\x10\x13\x5\x4\x3\x2\x11\x13\x5\x6\x4\x2");
			sb.Append("\x12\x10\x3\x2\x2\x2\x12\x11\x3\x2\x2\x2\x13\x3\x3\x2\x2\x2");
			sb.Append("\x14\x15\a\x6\x2\x2\x15\x16\a\a\x2\x2\x16\x17\x5\xE\b\x2\x17");
			sb.Append("\x5\x3\x2\x2\x2\x18\x19\a\x6\x2\x2\x19\x1A\a\b\x2\x2\x1A\x1B");
			sb.Append("\x5\xE\b\x2\x1B\x1C\a\x3\x2\x2\x1C\x1D\x5\b\x5\x2\x1D\x1E\a");
			sb.Append("\x4\x2\x2\x1E\a\x3\x2\x2\x2\x1F$\x5\n\x6\x2 !\a\x5\x2\x2!#\x5");
			sb.Append("\n\x6\x2\" \x3\x2\x2\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2");
			sb.Append("\x2\x2%\t\x3\x2\x2\x2&$\x3\x2\x2\x2\'(\x5\xE\b\x2()\x5\f\a\x2");
			sb.Append(")\v\x3\x2\x2\x2*\x30\a\t\x2\x2+,\a\n\x2\x2,-\a\x3\x2\x2-.\a");
			sb.Append("\v\x2\x2.\x30\a\x4\x2\x2/*\x3\x2\x2\x2/+\x3\x2\x2\x2\x30\r\x3");
			sb.Append("\x2\x2\x2\x31\x32\a\f\x2\x2\x32\xF\x3\x2\x2\x2\x5\x12$/");
			return sb.ToString();
		}

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


	}
}
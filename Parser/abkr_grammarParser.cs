//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class abkr_grammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, STRING=6, CREATE=7, DATABASE=8, 
		TABLE=9, INDEX=10, DROP=11, ON=12, INT=13, VARCHAR=14, PRIMARY=15, KEY=16, 
		INSERT=17, INTO=18, VALUES=19, DELETE=20, FROM=21, WHERE=22, NUMBER=23, 
		IDENTIFIER=24, WS=25;
	public const int
		RULE_statement = 0, RULE_create_database_statement = 1, RULE_create_table_statement = 2, 
		RULE_drop_database_statement = 3, RULE_drop_table_statement = 4, RULE_create_index_statement = 5, 
		RULE_drop_index_statement = 6, RULE_column_definition_list = 7, RULE_column_definition = 8, 
		RULE_column_constraint = 9, RULE_data_type = 10, RULE_identifier_list = 11, 
		RULE_identifier = 12, RULE_insert_statement = 13, RULE_delete_statement = 14, 
		RULE_value_list = 15, RULE_value = 16;
	public static readonly string[] ruleNames = {
		"statement", "create_database_statement", "create_table_statement", "drop_database_statement", 
		"drop_table_statement", "create_index_statement", "drop_index_statement", 
		"column_definition_list", "column_definition", "column_constraint", "data_type", 
		"identifier_list", "identifier", "insert_statement", "delete_statement", 
		"value_list", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'('", "')'", "','", "'='", null, "'CREATE'", "'DATABASE'", 
		"'TABLE'", "'INDEX'", "'DROP'", "'ON'", "'INT'", "'VARCHAR'", "'PRIMARY'", 
		"'KEY'", "'INSERT'", "'INTO'", "'VALUES'", "'DELETE'", "'FROM'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "STRING", "CREATE", "DATABASE", "TABLE", 
		"INDEX", "DROP", "ON", "INT", "VARCHAR", "PRIMARY", "KEY", "INSERT", "INTO", 
		"VALUES", "DELETE", "FROM", "WHERE", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static abkr_grammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public abkr_grammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public abkr_grammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_database_statementContext create_database_statement() {
			return GetRuleContext<Create_database_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_statementContext create_table_statement() {
			return GetRuleContext<Create_table_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_database_statementContext drop_database_statement() {
			return GetRuleContext<Drop_database_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_statementContext drop_table_statement() {
			return GetRuleContext<Drop_table_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_index_statementContext create_index_statement() {
			return GetRuleContext<Create_index_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_index_statementContext drop_index_statement() {
			return GetRuleContext<Drop_index_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				create_database_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				create_table_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				drop_database_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37;
				drop_table_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 38;
				create_index_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 39;
				drop_index_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 40;
				insert_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 41;
				delete_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(abkr_grammarParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_database_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_database_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_database_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_statementContext create_database_statement() {
		Create_database_statementContext _localctx = new Create_database_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_create_database_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(CREATE);
			State = 45;
			Match(DATABASE);
			State = 46;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(abkr_grammarParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_definition_listContext column_definition_list() {
			return GetRuleContext<Column_definition_listContext>(0);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_table_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_statementContext create_table_statement() {
		Create_table_statementContext _localctx = new Create_table_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_create_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(CREATE);
			State = 49;
			Match(TABLE);
			State = 50;
			identifier();
			State = 51;
			Match(T__0);
			State = 52;
			identifier();
			State = 53;
			Match(T__1);
			State = 54;
			column_definition_list();
			State = 55;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(abkr_grammarParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(abkr_grammarParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Drop_database_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_database_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_database_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_statementContext drop_database_statement() {
		Drop_database_statementContext _localctx = new Drop_database_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_drop_database_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(DROP);
			State = 58;
			Match(DATABASE);
			State = 59;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(abkr_grammarParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(abkr_grammarParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_table_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_statementContext drop_table_statement() {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_drop_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(DROP);
			State = 62;
			Match(TABLE);
			State = 63;
			identifier();
			State = 64;
			Match(T__0);
			State = 65;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(abkr_grammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(abkr_grammarParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(abkr_grammarParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		public Create_index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_index_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_index_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_statementContext create_index_statement() {
		Create_index_statementContext _localctx = new Create_index_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_create_index_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(CREATE);
			State = 68;
			Match(INDEX);
			State = 69;
			identifier();
			State = 70;
			Match(ON);
			State = 71;
			identifier();
			State = 72;
			Match(T__1);
			State = 73;
			identifier_list();
			State = 74;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(abkr_grammarParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(abkr_grammarParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(abkr_grammarParser.ON, 0); }
		public Drop_index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_index_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_index_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_statementContext drop_index_statement() {
		Drop_index_statementContext _localctx = new Drop_index_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_drop_index_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(DROP);
			State = 77;
			Match(INDEX);
			State = 78;
			identifier();
			State = 79;
			Match(ON);
			State = 80;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext[] column_definition() {
			return GetRuleContexts<Column_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition(int i) {
			return GetRuleContext<Column_definitionContext>(i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_definition_listContext column_definition_list() {
		Column_definition_listContext _localctx = new Column_definition_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_column_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			column_definition();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 83;
				Match(T__3);
				State = 84;
				column_definition();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			identifier();
			State = 91;
			data_type();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PRIMARY) {
				{
				{
				State = 92;
				column_constraint();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(abkr_grammarParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(abkr_grammarParser.KEY, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 18, RULE_column_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(PRIMARY);
			State = 99;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(abkr_grammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(abkr_grammarParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(abkr_grammarParser.NUMBER, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_data_type);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				Match(INT);
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				Match(VARCHAR);
				State = 103;
				Match(T__1);
				State = 104;
				Match(NUMBER);
				State = 105;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		Identifier_listContext _localctx = new Identifier_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			identifier();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 109;
				Match(T__3);
				State = 110;
				identifier();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(abkr_grammarParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(abkr_grammarParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(abkr_grammarParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(abkr_grammarParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(INSERT);
			State = 119;
			Match(INTO);
			State = 120;
			identifier();
			State = 121;
			Match(T__0);
			State = 122;
			identifier();
			State = 123;
			Match(VALUES);
			State = 124;
			Match(T__1);
			State = 125;
			value_list();
			State = 126;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(abkr_grammarParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(abkr_grammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(abkr_grammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_delete_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(DELETE);
			State = 129;
			Match(FROM);
			State = 130;
			identifier();
			State = 131;
			Match(T__0);
			State = 132;
			identifier();
			State = 133;
			Match(WHERE);
			State = 134;
			identifier();
			State = 135;
			Match(T__4);
			State = 136;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public Value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitValue_list(this);
		}
	}

	[RuleVersion(0)]
	public Value_listContext value_list() {
		Value_listContext _localctx = new Value_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			value();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 139;
				Match(T__3);
				State = 140;
				value();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(abkr_grammarParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(abkr_grammarParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,149,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,43,8,0,1,1,1,1,
		1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,
		4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,5,7,86,8,7,10,7,12,7,89,9,7,1,8,1,8,1,8,5,8,94,8,8,10,
		8,12,8,97,9,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,107,8,10,1,11,
		1,11,1,11,5,11,112,8,11,10,11,12,11,115,9,11,1,12,1,12,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,5,15,142,8,15,10,15,12,15,145,9,15,1,16,
		1,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,1,2,0,
		6,6,23,23,143,0,42,1,0,0,0,2,44,1,0,0,0,4,48,1,0,0,0,6,57,1,0,0,0,8,61,
		1,0,0,0,10,67,1,0,0,0,12,76,1,0,0,0,14,82,1,0,0,0,16,90,1,0,0,0,18,98,
		1,0,0,0,20,106,1,0,0,0,22,108,1,0,0,0,24,116,1,0,0,0,26,118,1,0,0,0,28,
		128,1,0,0,0,30,138,1,0,0,0,32,146,1,0,0,0,34,43,3,2,1,0,35,43,3,4,2,0,
		36,43,3,6,3,0,37,43,3,8,4,0,38,43,3,10,5,0,39,43,3,12,6,0,40,43,3,26,13,
		0,41,43,3,28,14,0,42,34,1,0,0,0,42,35,1,0,0,0,42,36,1,0,0,0,42,37,1,0,
		0,0,42,38,1,0,0,0,42,39,1,0,0,0,42,40,1,0,0,0,42,41,1,0,0,0,43,1,1,0,0,
		0,44,45,5,7,0,0,45,46,5,8,0,0,46,47,3,24,12,0,47,3,1,0,0,0,48,49,5,7,0,
		0,49,50,5,9,0,0,50,51,3,24,12,0,51,52,5,1,0,0,52,53,3,24,12,0,53,54,5,
		2,0,0,54,55,3,14,7,0,55,56,5,3,0,0,56,5,1,0,0,0,57,58,5,11,0,0,58,59,5,
		8,0,0,59,60,3,24,12,0,60,7,1,0,0,0,61,62,5,11,0,0,62,63,5,9,0,0,63,64,
		3,24,12,0,64,65,5,1,0,0,65,66,3,24,12,0,66,9,1,0,0,0,67,68,5,7,0,0,68,
		69,5,10,0,0,69,70,3,24,12,0,70,71,5,12,0,0,71,72,3,24,12,0,72,73,5,2,0,
		0,73,74,3,22,11,0,74,75,5,3,0,0,75,11,1,0,0,0,76,77,5,11,0,0,77,78,5,10,
		0,0,78,79,3,24,12,0,79,80,5,12,0,0,80,81,3,24,12,0,81,13,1,0,0,0,82,87,
		3,16,8,0,83,84,5,4,0,0,84,86,3,16,8,0,85,83,1,0,0,0,86,89,1,0,0,0,87,85,
		1,0,0,0,87,88,1,0,0,0,88,15,1,0,0,0,89,87,1,0,0,0,90,91,3,24,12,0,91,95,
		3,20,10,0,92,94,3,18,9,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,
		96,1,0,0,0,96,17,1,0,0,0,97,95,1,0,0,0,98,99,5,15,0,0,99,100,5,16,0,0,
		100,19,1,0,0,0,101,107,5,13,0,0,102,103,5,14,0,0,103,104,5,2,0,0,104,105,
		5,23,0,0,105,107,5,3,0,0,106,101,1,0,0,0,106,102,1,0,0,0,107,21,1,0,0,
		0,108,113,3,24,12,0,109,110,5,4,0,0,110,112,3,24,12,0,111,109,1,0,0,0,
		112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,23,1,0,0,0,115,113,
		1,0,0,0,116,117,5,24,0,0,117,25,1,0,0,0,118,119,5,17,0,0,119,120,5,18,
		0,0,120,121,3,24,12,0,121,122,5,1,0,0,122,123,3,24,12,0,123,124,5,19,0,
		0,124,125,5,2,0,0,125,126,3,30,15,0,126,127,5,3,0,0,127,27,1,0,0,0,128,
		129,5,20,0,0,129,130,5,21,0,0,130,131,3,24,12,0,131,132,5,1,0,0,132,133,
		3,24,12,0,133,134,5,22,0,0,134,135,3,24,12,0,135,136,5,5,0,0,136,137,3,
		32,16,0,137,29,1,0,0,0,138,143,3,32,16,0,139,140,5,4,0,0,140,142,3,32,
		16,0,141,139,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
		31,1,0,0,0,145,143,1,0,0,0,146,147,7,0,0,0,147,33,1,0,0,0,6,42,87,95,106,
		113,143
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

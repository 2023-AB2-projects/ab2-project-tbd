//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from abkr_grammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class abkr_grammar : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CREATE=1, DATABASE=2, TABLE=3, INDEX=4, UNIQUE=5, DROP=6, ON=7, INT=8, 
		VARCHAR=9, PRIMARY=10, KEY=11, FOREIGN=12, REFERENCES=13, INSERT=14, INTO=15, 
		VALUES=16, DELETE=17, FROM=18, WHERE=19, SELECT=20, AND=21, ASTERISK=22, 
		GREATER_THAN=23, GREATER_EQUALS=24, LESS_THAN=25, LESS_EQUALS=26, DOT=27, 
		COMMA=28, COLON=29, LPAREN=30, RPAREN=31, EQUALS=32, IDENTIFIER=33, NUMBER=34, 
		STRING=35, WS=36;
	public const int
		RULE_statement = 0, RULE_create_database_statement = 1, RULE_create_table_statement = 2, 
		RULE_drop_database_statement = 3, RULE_drop_table_statement = 4, RULE_create_index_statement = 5, 
		RULE_drop_index_statement = 6, RULE_column_definition_list = 7, RULE_column_definition = 8, 
		RULE_column_constraint = 9, RULE_data_type = 10, RULE_identifier_list = 11, 
		RULE_identifier = 12, RULE_insert_statement = 13, RULE_delete_statement = 14, 
		RULE_value_list = 15, RULE_value = 16, RULE_select_statement = 17, RULE_column_list = 18, 
		RULE_where_clause = 19, RULE_condition = 20, RULE_comparison_operator = 21;
	public static readonly string[] ruleNames = {
		"statement", "create_database_statement", "create_table_statement", "drop_database_statement", 
		"drop_table_statement", "create_index_statement", "drop_index_statement", 
		"column_definition_list", "column_definition", "column_constraint", "data_type", 
		"identifier_list", "identifier", "insert_statement", "delete_statement", 
		"value_list", "value", "select_statement", "column_list", "where_clause", 
		"condition", "comparison_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'*'", "'>'", 
		"'>='", "'<'", "'<='", "'.'", "','", "':'", "'('", "')'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CREATE", "DATABASE", "TABLE", "INDEX", "UNIQUE", "DROP", "ON", 
		"INT", "VARCHAR", "PRIMARY", "KEY", "FOREIGN", "REFERENCES", "INSERT", 
		"INTO", "VALUES", "DELETE", "FROM", "WHERE", "SELECT", "AND", "ASTERISK", 
		"GREATER_THAN", "GREATER_EQUALS", "LESS_THAN", "LESS_EQUALS", "DOT", "COMMA", 
		"COLON", "LPAREN", "RPAREN", "EQUALS", "IDENTIFIER", "NUMBER", "STRING", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "abkr_grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static abkr_grammar() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public abkr_grammar(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public abkr_grammar(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_database_statementContext create_database_statement() {
			return GetRuleContext<Create_database_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_statementContext create_table_statement() {
			return GetRuleContext<Create_table_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_database_statementContext drop_database_statement() {
			return GetRuleContext<Drop_database_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_statementContext drop_table_statement() {
			return GetRuleContext<Drop_table_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_index_statementContext create_index_statement() {
			return GetRuleContext<Create_index_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_index_statementContext drop_index_statement() {
			return GetRuleContext<Drop_index_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				create_database_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45;
				create_table_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				drop_database_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 47;
				drop_table_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 48;
				create_index_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 49;
				drop_index_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 50;
				insert_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 51;
				delete_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 52;
				select_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(abkr_grammar.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(abkr_grammar.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_database_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_database_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_database_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_statementContext create_database_statement() {
		Create_database_statementContext _localctx = new Create_database_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_create_database_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(CREATE);
			State = 56;
			Match(DATABASE);
			State = 57;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(abkr_grammar.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(abkr_grammar.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(abkr_grammar.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(abkr_grammar.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_definition_listContext column_definition_list() {
			return GetRuleContext<Column_definition_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(abkr_grammar.RPAREN, 0); }
		public Create_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_table_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_statementContext create_table_statement() {
		Create_table_statementContext _localctx = new Create_table_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_create_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(CREATE);
			State = 60;
			Match(TABLE);
			State = 61;
			identifier();
			State = 62;
			Match(DOT);
			State = 63;
			identifier();
			State = 64;
			Match(LPAREN);
			State = 65;
			column_definition_list();
			State = 66;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_database_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(abkr_grammar.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(abkr_grammar.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Drop_database_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_database_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_database_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_database_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_database_statementContext drop_database_statement() {
		Drop_database_statementContext _localctx = new Drop_database_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_drop_database_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(DROP);
			State = 69;
			Match(DATABASE);
			State = 70;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(abkr_grammar.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(abkr_grammar.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(abkr_grammar.DOT, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_table_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_statementContext drop_table_statement() {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_drop_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(DROP);
			State = 73;
			Match(TABLE);
			State = 74;
			identifier();
			State = 75;
			Match(DOT);
			State = 76;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(abkr_grammar.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(abkr_grammar.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(abkr_grammar.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(abkr_grammar.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(abkr_grammar.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(abkr_grammar.UNIQUE, 0); }
		public Create_index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCreate_index_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCreate_index_statement(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_statementContext create_index_statement() {
		Create_index_statementContext _localctx = new Create_index_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_create_index_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(CREATE);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 79;
				Match(UNIQUE);
				}
			}

			State = 82;
			Match(INDEX);
			State = 83;
			identifier();
			State = 84;
			Match(ON);
			State = 85;
			identifier();
			State = 86;
			Match(LPAREN);
			State = 87;
			identifier_list();
			State = 88;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(abkr_grammar.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(abkr_grammar.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(abkr_grammar.ON, 0); }
		public Drop_index_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDrop_index_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDrop_index_statement(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_statementContext drop_index_statement() {
		Drop_index_statementContext _localctx = new Drop_index_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_drop_index_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(DROP);
			State = 91;
			Match(INDEX);
			State = 92;
			identifier();
			State = 93;
			Match(ON);
			State = 94;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext[] column_definition() {
			return GetRuleContexts<Column_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition(int i) {
			return GetRuleContext<Column_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(abkr_grammar.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(abkr_grammar.COMMA, i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_definition_listContext column_definition_list() {
		Column_definition_listContext _localctx = new Column_definition_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_column_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			column_definition();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 97;
				Match(COMMA);
				State = 98;
				column_definition();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			identifier();
			State = 105;
			data_type();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5152L) != 0)) {
				{
				{
				State = 106;
				column_constraint();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(abkr_grammar.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(abkr_grammar.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(abkr_grammar.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(abkr_grammar.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(abkr_grammar.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(abkr_grammar.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(abkr_grammar.COLON, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 18, RULE_column_constraint);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				Match(PRIMARY);
				State = 113;
				Match(KEY);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(UNIQUE);
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				Match(FOREIGN);
				State = 116;
				Match(KEY);
				State = 117;
				Match(REFERENCES);
				State = 118;
				identifier();
				State = 119;
				Match(DOT);
				State = 120;
				identifier();
				State = 121;
				Match(COLON);
				State = 122;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(abkr_grammar.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(abkr_grammar.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(abkr_grammar.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(abkr_grammar.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(abkr_grammar.RPAREN, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_data_type);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				Match(INT);
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				Match(VARCHAR);
				State = 128;
				Match(LPAREN);
				State = 129;
				Match(NUMBER);
				State = 130;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(abkr_grammar.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(abkr_grammar.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier_list(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		Identifier_listContext _localctx = new Identifier_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			identifier();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 134;
				Match(COMMA);
				State = 135;
				identifier();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(abkr_grammar.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(abkr_grammar.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(abkr_grammar.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(abkr_grammar.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(abkr_grammar.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(abkr_grammar.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(abkr_grammar.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list() {
			return GetRuleContext<Value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(abkr_grammar.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(abkr_grammar.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(INSERT);
			State = 144;
			Match(INTO);
			State = 145;
			identifier();
			State = 146;
			Match(DOT);
			State = 147;
			identifier();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 148;
				Match(LPAREN);
				State = 149;
				identifier_list();
				State = 150;
				Match(RPAREN);
				}
			}

			State = 154;
			Match(VALUES);
			State = 155;
			Match(LPAREN);
			State = 156;
			value_list();
			State = 157;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(abkr_grammar.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(abkr_grammar.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(abkr_grammar.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_delete_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(DELETE);
			State = 160;
			Match(FROM);
			State = 161;
			identifier();
			State = 162;
			Match(DOT);
			State = 163;
			identifier();
			State = 164;
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(abkr_grammar.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(abkr_grammar.COMMA, i);
		}
		public Value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitValue_list(this);
		}
	}

	[RuleVersion(0)]
	public Value_listContext value_list() {
		Value_listContext _localctx = new Value_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			value();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 167;
				Match(COMMA);
				State = 168;
				value();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(abkr_grammar.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(abkr_grammar.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(abkr_grammar.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(abkr_grammar.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(abkr_grammar.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(SELECT);
			State = 177;
			column_list();
			State = 178;
			Match(FROM);
			State = 179;
			identifier();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 180;
				Match(DOT);
				State = 181;
				identifier();
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 184;
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(abkr_grammar.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterColumn_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitColumn_list(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 36, RULE_column_list);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				Match(ASTERISK);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(abkr_grammar.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(WHERE);
			State = 192;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(abkr_grammar.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			identifier();
			State = 195;
			comparison_operator();
			State = 196;
			value();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 197;
				Match(AND);
				State = 198;
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(abkr_grammar.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(abkr_grammar.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(abkr_grammar.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(abkr_grammar.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(abkr_grammar.LESS_EQUALS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iabkr_grammarListener typedListener = listener as Iabkr_grammarListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4420796416L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,204,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,54,8,0,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		5,1,5,3,5,81,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,5,7,100,8,7,10,7,12,7,103,9,7,1,8,1,8,1,8,5,8,108,8,8,10,
		8,12,8,111,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,125,
		8,9,1,10,1,10,1,10,1,10,1,10,3,10,132,8,10,1,11,1,11,1,11,5,11,137,8,11,
		10,11,12,11,140,9,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,3,13,153,8,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,15,1,15,1,15,5,15,170,8,15,10,15,12,15,173,9,15,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,1,17,3,17,183,8,17,1,17,3,17,186,8,17,1,18,1,18,
		3,18,190,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,200,8,20,1,
		21,1,21,1,21,0,0,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,0,2,1,0,34,35,2,0,23,26,32,32,202,0,53,1,0,0,0,2,55,1,0,0,0,4,
		59,1,0,0,0,6,68,1,0,0,0,8,72,1,0,0,0,10,78,1,0,0,0,12,90,1,0,0,0,14,96,
		1,0,0,0,16,104,1,0,0,0,18,124,1,0,0,0,20,131,1,0,0,0,22,133,1,0,0,0,24,
		141,1,0,0,0,26,143,1,0,0,0,28,159,1,0,0,0,30,166,1,0,0,0,32,174,1,0,0,
		0,34,176,1,0,0,0,36,189,1,0,0,0,38,191,1,0,0,0,40,194,1,0,0,0,42,201,1,
		0,0,0,44,54,3,2,1,0,45,54,3,4,2,0,46,54,3,6,3,0,47,54,3,8,4,0,48,54,3,
		10,5,0,49,54,3,12,6,0,50,54,3,26,13,0,51,54,3,28,14,0,52,54,3,34,17,0,
		53,44,1,0,0,0,53,45,1,0,0,0,53,46,1,0,0,0,53,47,1,0,0,0,53,48,1,0,0,0,
		53,49,1,0,0,0,53,50,1,0,0,0,53,51,1,0,0,0,53,52,1,0,0,0,54,1,1,0,0,0,55,
		56,5,1,0,0,56,57,5,2,0,0,57,58,3,24,12,0,58,3,1,0,0,0,59,60,5,1,0,0,60,
		61,5,3,0,0,61,62,3,24,12,0,62,63,5,27,0,0,63,64,3,24,12,0,64,65,5,30,0,
		0,65,66,3,14,7,0,66,67,5,31,0,0,67,5,1,0,0,0,68,69,5,6,0,0,69,70,5,2,0,
		0,70,71,3,24,12,0,71,7,1,0,0,0,72,73,5,6,0,0,73,74,5,3,0,0,74,75,3,24,
		12,0,75,76,5,27,0,0,76,77,3,24,12,0,77,9,1,0,0,0,78,80,5,1,0,0,79,81,5,
		5,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,5,4,0,0,83,84,3,
		24,12,0,84,85,5,7,0,0,85,86,3,24,12,0,86,87,5,30,0,0,87,88,3,22,11,0,88,
		89,5,31,0,0,89,11,1,0,0,0,90,91,5,6,0,0,91,92,5,4,0,0,92,93,3,24,12,0,
		93,94,5,7,0,0,94,95,3,24,12,0,95,13,1,0,0,0,96,101,3,16,8,0,97,98,5,28,
		0,0,98,100,3,16,8,0,99,97,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,
		1,0,0,0,102,15,1,0,0,0,103,101,1,0,0,0,104,105,3,24,12,0,105,109,3,20,
		10,0,106,108,3,18,9,0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,
		109,110,1,0,0,0,110,17,1,0,0,0,111,109,1,0,0,0,112,113,5,10,0,0,113,125,
		5,11,0,0,114,125,5,5,0,0,115,116,5,12,0,0,116,117,5,11,0,0,117,118,5,13,
		0,0,118,119,3,24,12,0,119,120,5,27,0,0,120,121,3,24,12,0,121,122,5,29,
		0,0,122,123,3,24,12,0,123,125,1,0,0,0,124,112,1,0,0,0,124,114,1,0,0,0,
		124,115,1,0,0,0,125,19,1,0,0,0,126,132,5,8,0,0,127,128,5,9,0,0,128,129,
		5,30,0,0,129,130,5,34,0,0,130,132,5,31,0,0,131,126,1,0,0,0,131,127,1,0,
		0,0,132,21,1,0,0,0,133,138,3,24,12,0,134,135,5,28,0,0,135,137,3,24,12,
		0,136,134,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,
		23,1,0,0,0,140,138,1,0,0,0,141,142,5,33,0,0,142,25,1,0,0,0,143,144,5,14,
		0,0,144,145,5,15,0,0,145,146,3,24,12,0,146,147,5,27,0,0,147,152,3,24,12,
		0,148,149,5,30,0,0,149,150,3,22,11,0,150,151,5,31,0,0,151,153,1,0,0,0,
		152,148,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,155,5,16,0,0,155,156,
		5,30,0,0,156,157,3,30,15,0,157,158,5,31,0,0,158,27,1,0,0,0,159,160,5,17,
		0,0,160,161,5,18,0,0,161,162,3,24,12,0,162,163,5,27,0,0,163,164,3,24,12,
		0,164,165,3,38,19,0,165,29,1,0,0,0,166,171,3,32,16,0,167,168,5,28,0,0,
		168,170,3,32,16,0,169,167,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,
		172,1,0,0,0,172,31,1,0,0,0,173,171,1,0,0,0,174,175,7,0,0,0,175,33,1,0,
		0,0,176,177,5,20,0,0,177,178,3,36,18,0,178,179,5,18,0,0,179,182,3,24,12,
		0,180,181,5,27,0,0,181,183,3,24,12,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
		185,1,0,0,0,184,186,3,38,19,0,185,184,1,0,0,0,185,186,1,0,0,0,186,35,1,
		0,0,0,187,190,5,22,0,0,188,190,3,22,11,0,189,187,1,0,0,0,189,188,1,0,0,
		0,190,37,1,0,0,0,191,192,5,19,0,0,192,193,3,40,20,0,193,39,1,0,0,0,194,
		195,3,24,12,0,195,196,3,42,21,0,196,199,3,32,16,0,197,198,5,21,0,0,198,
		200,3,40,20,0,199,197,1,0,0,0,199,200,1,0,0,0,200,41,1,0,0,0,201,202,7,
		1,0,0,202,43,1,0,0,0,13,53,80,101,109,124,131,138,152,171,182,185,189,
		199
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
